log_of_odds
}
log_odds_4(probs)
log_odds_4 = function(p, b = 10){
odds = p / (1 - p)
log_of_odds = log(odds, base = b)
log_of_odds
}
log_odds_4(probs)
log_odds_5 = function(p, b = 10){
odds = p / (1 - p)
log_of_odds = log(odds, base = b)
return(log_of_odds)
}
log_odds_5(probs)
# Function scope and environment
assign_x = function(){
x = 17
x
}
x = 42
assign_x()
assign_x2 = function(x){
x[2] = 42
x
}
x = c(2, 4, 8)
assign_x2(x)
increment_x = funciton(){
increment_x(42)
increment_x = function(){
x + 1
}
x = 42
increment_x(42)
increment_x()
increment_x(x = 42)
increment_x()
# Funtions can be nested
f = function(){
x = 1
g = function(){
x + 1
}
h = function(){
y + 2
}
c(g(), h())
}
f()
y = 42
f()
f = function(){
y = 42
function(x){
x + y
}
}
g = f()
y = 21
g(17)
f = function(){
x <<- 42
}
x = 17
f()
x
f = function(x, g){
g(sum(x))
}
f(x, log10)
log10(3.9)
log10(3.9)
x = c(0.1, 1.1, 2.7)
f(x, log10)
log10(3.9)
f(x, sqrt)
sqrt(3.9)
f(x, tanh)
tanh(3.9)
f(x, square)
square = function(x) x^2
f(x, square)
3.9^2
f(x, function(x) x^2)
f(x, function(x) log(x^2))
y = (function(x, y, z){x + y + z}) (1, 2, 3)
y
library(tidyverse)
data_df = tibble(x = rnorm(10),
y = rnorm(10))
View(data_df)
write_data = T
if (write_data) {
write_csv(data_df, 'tmp_data.csv')
write_data = T
if (write_data) {
write_csv(data_df, 'tmp_data.csv')
}
View(data_df)
?write_csv
?write_csv
pnorm(1)
pnorm(1300, mean = 1100, sd = 200)
?pnorm
pnorm(1)
pnorm(1300, mean = 1100, sd = 200)
source("~/.active-rstudio-document")
pnorm(0.45)
pnorm(-.35)
pnorm(2)
pnorm(-.9091)
pnorm(1.8182)
?pnorm
pnorm(40)
zscore(.4)
qnorm(0.4)
qnorm(0.82)
qnorm(.95)
qnorm(0.975)
p(1.21)
pnorm(1.21)
pnorm(0.3)
pnorm(-0.3)
pnorm(0)
pnorm(1.5)
pnorm(-1.52)
pnorm(-.91)
pnorm(1)
pnorm(-1)
pnorm(-2)
pnorm(2)
pnorm(-3)
pnorm(3)
pnorm(0)
qnorm(-1.13)
smallpox = smallpox
smallpox = data(smallpox)
table(smallpox)
data(smallpox)
table(smallpox)
# 1. Create a set of 250 million entries, where 88% of them are "support"
# and 12% are "not".
pop size <- 250000000
# 1. Create a set of 250 million entries, where 88% of them are "support"
# and 12% are "not".
pop_size <- 250000000
possible_entries <- c(rep("support", 0.88 * pop_size), rep("not", 0.12 * pop_size))
# 2. Sample 1000 entries without replacement.
sampled_entries <- sample(possible_entries, size = 1000)
# 3. Compute p-hat: count the number that are "support", then divide by # the sample size.
sum(sampled_entries == "support") / 1000
print(sum(sampled_entries == "support") / 1000)
qnorm(2)
rnorm(2)
rnorm(-2)
rnorm(2)
pnorm(2)
1 - pnorm(2)
pnorm(-2)
1 - pnorm(2)
pnorm(1.96)
qnorm(0.99)
qnorm(0.9)
qnorm(0.90)
pnorm(8.92)
qnorm(8.92)
qnorm(3.85)
pnorm(3.85)
pnorm(8.92)
pnorm(0.421, mean = 0.5, sd = sqrt(0.25/765))
pnorm(-8.125)
pnorm(8.92)
x = rnorm(100)
y = rnorm(100)
x = seq(1,10)
x = 1:10
x = seq(-pi, pi, length = 50)
y = x
f = outer(x, y, function (x,y)cos(y)/(1+x^2))
contour(x, y, f)
contour(x, y, f, nlevels = 45, add = T)
fa = (f-t(f))/2
contour(x, y, fa, nlevels = 15)
image(x, y , fa)
persp(x, y, fa)
persp(x, y, fa, theta = 30)
persp(x, y, fa, theta = 30, phi = 20)
persp(x, y, fa, theta = 30, phi = 70)
persp(x, y, fa, theta = 30, phi = 40)
A = matrix(1:16, 4, 4)
View(A)
A[2,3]
A[c(1,3), c(2,4)]
A[1:3, 2:4]
A[1:2,]
A[,1:2]
A[1,]
A[-c(1,3),]
A[-c(1,3), -c(1,3,4)]
dim(A)
college = read.csv("https://www.statlearning.com/s/College.csv")
college = read.csv("https://www.statlearning.com/s/College.csv")
View(college)
View(college)
View(college)
college = read.csv("Week_2/College.csv)
college = read.csv("Week_2/College.csv")
college = read.csv("Week_1/College.csv")
college = read.csv("Week_1/College.csv")
getwd()
setwd("/Users/doojerthekid/Documents/Merrimack Grad School Documents/DSE6111")
college = read.csv("Week_1/College.csv")
fix(collge)
fix(college)
row.names(college) = college[,1]
fix(college)
View(college)
View(college)
View(college)
college = college[,-1]
View(college)
fix(college)
View(college)
summary(collge)
summary(college)
pairs(college[,1:10])
pairs(college)
# Convert private variable into factor using as.factor
college$Private = as.factor(college$Private)
View(college)
pairs(college[,1:10])
plot(college$Outstate, college$Private)
plot(college$Private, college$Outstate)
library(ggplot2)
plot(college$Private, college$Outstate,
xlabs = "Private University: Yes or No",
ylabs = "Out of State Tuition")
setwd("/Users/doojerthekid/Documents/Merrimack Grad School Documents/DSE6111")
college = read.csv("Week_1/College.csv")
# b.)
fix(college)
row.names(college) = college[,1]
fix(college)
# Eliminate first column in data where names are stored
college = college[,-1]
fix(college)
# c.)
# i.)
summary(college)
# ii.)
# Convert private variable into factor using as.factor
college$Private = as.factor(college$Private)
pairs(college[,1:10])
plot(college$Private, college$Outstate,
xlabs = "Private University: Yes or No",
ylabs = "Out of State Tuition")
plot(college$Private, college$Outstate,
xlab = "Private University: Yes or No",
ylab = "Out of State Tuition")
plot(college$Private, college$Outstate,
xlab = "Private University: Yes or No",
ylab = "Out of State Tuition in $")
college = read.csv("Week_1/College.csv")
row.names(college) = college[,1]
row.names(college) = college[,1]
college = college[,-1]
college$Private = as.factor(college$Private)
pairs(college[,1:10])
plot(college$Private, college$Outstate,
xlab = "Private University: Yes or No",
ylab = "Out of State Tuition in $")
?binning
>bin
?bin
Elite = rep("No", nrow(college))
View(college)
Elite[college$Top10perc > 50] = "Yes"
Elite = as.fator(Elite)
Elite = as.factor(Elite)
college = data.frame(college, Elite)
View(college)
view(college)
summary(college)
?data.frame
plot(college$Elite, college$Outstate,
xlab = "Over 50% of new students from top 10% of high school class",
ylab = "Out of State Tuition in $")
# Plot side-by-side boxplots of Outstate versus Elite
plot(college$Elite, college$Outstate,
xlab = "Over 50% of New Students from Top 10% of High School Class",
ylab = "Out of State Tuition in $")
?par
?hist
hist(college$Apps)
par(mfrow=c(2,2))
hist(college$F.Undergrad)
hist(college$P.Undergrad)
hist(college$Room.Board)
hist(college$Grad.Rate)
par(mfrow=c(2,2))
hist(college$Outstate)
hist(college$Books)
hist(college$Room.Board)
hist(college$Grad.Rate)
plot(college$Apps, college$Accept)
plot(college$Accept, college$Enroll)
acceptance_rate = college$Accept / college$Apps
row.names(college[which.max(acceptance_rate)])
row.names(college)[which.max(acceptance_rate)]
row.names(college)[which.max(acceptance_rate)]
row.names(college)[which.min(acceptance_rate)]
which.max(acceptance_rate)
acceptance_rate
min(acceptance_rate)
max(acceptance_rate)
college[1,193]
college[193,]
which.max(acceptance rate)
which.max(acceptance_rate)
enrollment_rate = college$Enroll / college$Accept
row.names(college)[which.max(enrollment_rate)]
row.names(college)[which.min(enrollment_rate)]
max(enrollment_rate)
min(enrollment_rate)
par(mfrow=c(2,2))
plot(college$Outstate, college$Grad.Rate)
plot(college$Room.Board, college$Grad.Rate)
plot(college$Books, college$Grad.Rate)
plot(college$Personal, college$Grad.Rate)
row.names(college)[which.max(college$Grad.Rate)]
row.names(college)[which.min(college$Grad.Rate)]
max(college$Grad.Rate)
min(college$Grad.Rate)
hist(college$Grad.Rate)
par(mfrow=c(2,2))
hist(college$Outstate)
hist(college$Books)
hist(college$Room.Board)
hist(college$Grad.Rate)
hist(college$Room.Board)
par(mfrow=c(2,2))
plot(college$Outstate, college$Grad.Rate)
plot(college$Room.Board, college$Grad.Rate)
plot(college$Books, college$Grad.Rate)
plot(college$Personal, college$Grad.Rate)
lm(college$Outstate, college$Grad.Rate)
plot(college$Outstate, college$Grad.Rate,
xlab = "Out of State Tuition in $",
ylab = "Graduation Percentage Rate")
abline(lm_model, col = "blue")
auto = read.csv("Week_1/Auto.csv")
View(auto)
summary(auto)
range(auto$mpg)
range(auto$mpg)
auto = na.omit(auto)
auto = read.csv("Week_1/Auto.csv")
auto = na.omit(auto)
View(auto)
auto = read.csv("Week_1/Auto.csv")
auto = read.csv("Week_1/Auto.csv")
auto = na.omit(auto)
dim(auto)
View(auto)
auto = read.csv("Week_1/Auto.csv")
auto = na.omit(auto)
range(auto$mpg)
range(auto$cylinders)
range(auto$displacement)
range(auto$horsepower)
auto$horsepower[auto$horsepower == "?"] = NA
auto$horsepower[auto$horsepower == "?"] = NA
auto = read.csv("Week_1/Auto.csv")
auto$horsepower[auto$horsepower == "?"] = NA
auto = na.omit(auto)
summary(auto)
range(auto$mpg)
range(auto$cylinders)
range(auto$displacement)
range(auto$horsepower)
auto = read.csv("Week_1/Auto.csv")
auto$horsepower[auto$horsepower == "?"] = NA
auto = na.omit(auto)
range(auto$horsepower)
auto$horsepower = as.integer(auto$horsepower)
range(auto$horsepower)
range(auto$weight)
range(auto$acceleration)
mean(auto$mpg)
sd(auto$mpg)
mean(auto$cylinders)
sd(auto$cylinders)
mean(auto$displacement)
sd(auto$displacement)
mean(auto$horsepower)
sd(auto$horsepower)
mean(auto$weight)
sd(auto$weight)
mean(auto$acceleration)
sd(auto$acceleration)
auto = auto[-c(10, 85), ]
View(auto)
mean(auto$mpg)
sd(auto$mpg)
mean(auto$cylinders)
sd(auto$cylinders)
mean(auto$displacement)
sd(auto$displacement)
mean(auto$horsepower)
sd(auto$horsepower)
mean(auto$weight)
sd(auto$weight)
mean(auto$acceleration)
sd(auto$acceleration)
auto = read.csv("Week_1/Auto.csv")
auto$horsepower[auto$horsepower == "?"] = NA
auto = na.omit(auto)
auto$horsepower = as.integer(auto$horsepower)
range(auto$horsepower)
View(auto)
plot(auto$weight, auto$mpg)
plot(auto$weight, auto$horsepower)
plot(auto$weight, auto$acceleration)
plot(auto$cylinders, auto$horsepower)
plot(auto$horsepower, auto$displacement)
plot(auto$horsepower, auto$acceleration)
plot(auto$horsepower, auto$mpg)
par(mfrow=c(2,2))
plot(auto$weight, auto$mpg)
plot(auto$horsepower, auto$mpg)
plot(auto$displacement, auto$mpg)
plot(auto$acceleration, auto$mpg)
library(MASS)
Boston
?Boston
boston = Boston
dim(boston)
View(boston)
plot(boston$dis, boston$medv)
par(mfrow=c(1,1))
plot(boston$dis, boston$medv)
?Boston
plot(boston$dis, boston$tax)
?Boston
plot(boston$dis, boston$indus)
plot(boston$dis, boston$medv)
plot(boston$dis, boston$crim)
plot(boston$age, boston$rm)
plot(boston$dis, boston$tax)
plot(boston$dis, boston$black)
plot(boston$dis, boston$chas)
plot(boston$dis, boston$nox)
plot(boston$zn, boston$crim)
plot(boston$indus, boston$crim)
plot(boston$chas, boston$crim)
plot(boston$nox, boston$crim)
plot(boston$rm, boston$crim)
plot(boston$age, boston$crim)
plot(boston$dis, boston$crim)
plot(boston$rad, boston$crim)
plot(boston$tax, boston$crim)
plot(boston$ptratio, boston$crim)
plot(boston$black, boston$crim)
plot(boston$lstat, boston$crim)
plot(boston$medv, boston$crim)
range(boston$crim)
range(boston$tax)
range(boston$ptratio)
summary(boston$chas)
summary(boston)
table(boston$chas)
summary(boston$ptratio)
row.names(boston)[which.min(boston$medv)]
summary(boston[399])
summary(boston[399,])
summary(boston)
boston[399,]
range(boston$zn)
range(boston$indus)
range(boston$chas)
range(boston$nox)
range(boston$rm)
range(boston$age)
range(boston$dis)
range(boston$rad)
range(boston$black)
range(boston$lstat)
range(boston$medv)
row.names(boston)[which(boston$rm > 7)]
count(row.names(boston)[which(boston$rm > 7)])
nrow(boston[boston$rm > 7, ])
nrow(boston[boston$rm > 8, ])
sum(boston$rm > 7)
sum(boston$rm > 8)
summary(sum(boston$rm > 8))
summary(subset(boston$rm > 8))
summary(subset(boston, rm > 8))
cat("Mean of mpg is:", mean(auto$mpg))
cat("SD of mpg is:", sd(auto$mpg))
cat("Mean of mpg is:", mean(auto$mpg))
cat("SD of mpg is:", sd(auto$mpg))
cat("Mean of mpg is:", mean(auto$mpg))
cat("\n")
cat("SD of mpg is:", sd(auto$mpg))
cat("Mean of cylinders is:", mean(auto$cylinders))
cat("\n")
cat("SD of cylinders is:", sd(auto$cylinders))
cat("SD of cylinders is", sd(auto$cylinders))
cat("Mean of cylinders is", mean(auto$cylinders))
cat("\n")
cat("SD of cylinders is", sd(auto$cylinders))
