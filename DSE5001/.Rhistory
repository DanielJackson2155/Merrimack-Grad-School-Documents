f = function(x, g){
g(sum(x))
}
x = c(0.1, 1.1, 2.7)
x = c(0.1, 1.1, 2.7)
f(x, log10)
f(x, function(x) x^2)
rnorm(10)
tibble()
data_df = tibble(x = rnorm(10),
y = rnorm(10))
library(tidyverse)
data_df = tibble(x = rnorm(10),
y = rnorm(10))
?tibble
View(data_df)
x = rnorm(10)
rnorm(10)
?rnorm
write_data = TRUE
if (write_data){
write_csv(data_df, 'tmp_data.csv')
}
?write_data
use_new_data = TRUE
if (use_new_data){
data_df = read_csv('data.new.csv')
} else{
data_df = read_csv('data_old.csv')
}
N = 1000
x = seq(-0.1, 1.1, length.out = N)
relu = function(x){
if (x < 0) { 0 }
else{ x }
}
relu(1)
relu(-.3)
relu(3)
relu(x)
y = numeric(N)
for (i in 1:N){
y[i] = relu(x[i])
}
y
k = 0
while (2^(k+1) <= 10^6){
k = k + 1
}
k
2^19
10^6
x = c(-1, 0, 1)
y = lapply(x, relu)
y
y = map(x, relu)
x = c(-1, 0, 1)
y = lapply(x, relu)
y
y1 = map(x, relu)
y1
y == y1
y == y1
# Create a vector of housing prices
housing_prices <- c(rep(350000, 25), rep(450000, 50), rep(1000000, 75), seq(6000000, 10000000, by = 100000))
# Create a box plot
boxplot(housing_prices, horizontal = TRUE, notch = TRUE, main = "Housing Prices",
xlab = "Price in USD", outline = FALSE)
# Add labels to quartiles
text(c(350000, 450000, 1000000), c(1.5, 1.5, 1.5), c("Q1", "Median", "Q3"), pos = 4, col = "red", font = 2)
# Add labels to outliers
text(6000000, 1.5, "Outliers", pos = 4, col = "blue", font = 2)
# Create a vector of housing prices
housing_prices <- c(rep(300000, 25), rep(600000, 50), rep(900000, 75), seq(6000000, 10000000, by = 100000))
# Create a vector of housing prices
housing_prices <- c(rep(300000, 25), rep(600000, 50), rep(900000, 75), seq(6000000, 10000000, by = 100000))
# Create a box plot
boxplot(housing_prices, horizontal = TRUE, notch = TRUE, main = "Housing Prices",
xlab = "Price in USD", outline = FALSE)
# Add labels to quartiles
text(c(350000, 450000, 1000000), c(1.5, 1.5, 1.5), c("Q1", "Median", "Q3"), pos = 4, col = "red", font = 2)
# Add labels to outliers
text(6000000, 1.5, "Outliers", pos = 4, col = "blue", font = 2)
p = c(0.1, 0.25, 0.5, 0.75)
log(p/(1 - p)), base = 2)
log(p/(1 - p), base = 2)
log(p/(1 - p), base = 3)
log(p/(1 - p), base = 5)
log_odds = function(p, b){
log(p/(1-p), base = b)
}
log(p,2)
log(p/(1 - p), base = 2)
log_odds(p,2)
log_odds(p,3)
log_odds_1 = function(p,b) log(p/1-p),base = b)
log_odds_1 = function(p,b) log(p/(1-p),base = b)
log_odds = function(p,b) log(p/(1-p),base = b)
log_odds(p,3)
probs = c(0.25, 0.75, 0.9)
log_base = 2
log_odds(probs, log_base)
log_odds(p = probs, b = base)
probs = c(0.25, 0.75, 0.9)
log_base = 2
log_odds(probs, log_base)
log_odds(p = probs, b = base)
log_odds(p = probs, b = log_base)
# same as:
log_odds(b = base, p = probs)
log_odds(p = probs, b = log_base)
# same as:
log_odds(b = log_base, p = probs)
log_odds_2 = function(p, b = 10){
log(p/(1-p). base = b)
# Can create degauflt functions for arguments
log_odds_2 = function(p, b = 10) {
log(p/(1-p), base = b)
}
log_odds_2 = function(p, b = 10) {
log(p/(1-p), base = b)
}
log_odds2(probs, log_base)
log_odds_2 = function(p, b = 10) {
log(p/(1-p), base = b)
}
log_odds_2(probs, log_base)
log_odds_2(b = 3, p = probs)
log_odds_2(probs)
f_poly = function(x, y, s, t){
x^s + y^t
}
log_f_poly = function(b = 2, x, y, s, t){
log(f_poly(x, y, s, t), base = b)
}
log_f_poly = function(..., b = 2){
log(f_poly(...), base = b)
}
x = c(0.5, 1)
y = c(1,2)
s = 2
t = 3
log_f_poly(x, y, s, t, b = 2)
f = function(...){
list(...)
}
f(x = 1, y =2, z = 3)
# Missing arguments
add_xy = function(x, y, z){
x + y
}
add_xy(5,8)
is_missing_xyz = function(x, y, z){
c(missing(x),
missing(y),
missing(z))
}
is_missing_xyz(1,2)
is_missing_xyz((z = 1, y = 42))
is_missing_xyz(z = 1, y = 42)
is_missing_xyz(5,4,3)
log_odds_3 = function(p, b = 10){
odds = p / (1-p)
log(odds, base = b)
}
log_odds_3(probs)
# Variant of log_odds_3
log_odds_4 = function(p, b = 10){
odds = (p / 1-p)
log_of_odds = log(odds, base = b)
log_of_odds
}
log_odds_4(probs)
log_odds_4(probs)
log_odds_4 = function(p, b = 10){
odds = (p / 1 - p)
log_of_odds = log(odds, base = b)
log_of_odds
}
log_odds_4(probs)
log_odds_4 = function(p, b = 10){
odds = p / (1 - p)
log_of_odds = log(odds, base = b)
log_of_odds
}
log_odds_4(probs)
log_odds_5 = function(p, b = 10){
odds = p / (1 - p)
log_of_odds = log(odds, base = b)
return(log_of_odds)
}
log_odds_5(probs)
# Function scope and environment
assign_x = function(){
x = 17
x
}
x = 42
assign_x()
assign_x2 = function(x){
x[2] = 42
x
}
x = c(2, 4, 8)
assign_x2(x)
increment_x = funciton(){
increment_x(42)
increment_x = function(){
x + 1
}
x = 42
increment_x(42)
increment_x()
increment_x(x = 42)
increment_x()
# Funtions can be nested
f = function(){
x = 1
g = function(){
x + 1
}
h = function(){
y + 2
}
c(g(), h())
}
f()
y = 42
f()
f = function(){
y = 42
function(x){
x + y
}
}
g = f()
y = 21
g(17)
f = function(){
x <<- 42
}
x = 17
f()
x
f = function(x, g){
g(sum(x))
}
f(x, log10)
log10(3.9)
log10(3.9)
x = c(0.1, 1.1, 2.7)
f(x, log10)
log10(3.9)
f(x, sqrt)
sqrt(3.9)
f(x, tanh)
tanh(3.9)
f(x, square)
square = function(x) x^2
f(x, square)
3.9^2
f(x, function(x) x^2)
f(x, function(x) log(x^2))
y = (function(x, y, z){x + y + z}) (1, 2, 3)
y
library(tidyverse)
data_df = tibble(x = rnorm(10),
y = rnorm(10))
View(data_df)
write_data = T
if (write_data) {
write_csv(data_df, 'tmp_data.csv')
write_data = T
if (write_data) {
write_csv(data_df, 'tmp_data.csv')
}
View(data_df)
?write_csv
?write_csv
pnorm(1)
pnorm(1300, mean = 1100, sd = 200)
?pnorm
pnorm(1)
pnorm(1300, mean = 1100, sd = 200)
source("~/.active-rstudio-document")
pnorm(0.45)
pnorm(-.35)
pnorm(2)
pnorm(-.9091)
pnorm(1.8182)
?pnorm
pnorm(40)
zscore(.4)
qnorm(0.4)
qnorm(0.82)
qnorm(.95)
qnorm(0.975)
p(1.21)
pnorm(1.21)
pnorm(0.3)
pnorm(-0.3)
pnorm(0)
pnorm(1.5)
pnorm(-1.52)
pnorm(-.91)
pnorm(1)
pnorm(-1)
pnorm(-2)
pnorm(2)
pnorm(-3)
pnorm(3)
pnorm(0)
qnorm(-1.13)
smallpox = smallpox
smallpox = data(smallpox)
table(smallpox)
data(smallpox)
table(smallpox)
# 1. Create a set of 250 million entries, where 88% of them are "support"
# and 12% are "not".
pop size <- 250000000
# 1. Create a set of 250 million entries, where 88% of them are "support"
# and 12% are "not".
pop_size <- 250000000
possible_entries <- c(rep("support", 0.88 * pop_size), rep("not", 0.12 * pop_size))
# 2. Sample 1000 entries without replacement.
sampled_entries <- sample(possible_entries, size = 1000)
# 3. Compute p-hat: count the number that are "support", then divide by # the sample size.
sum(sampled_entries == "support") / 1000
print(sum(sampled_entries == "support") / 1000)
qnorm(2)
rnorm(2)
rnorm(-2)
rnorm(2)
pnorm(2)
1 - pnorm(2)
pnorm(-2)
1 - pnorm(2)
pnorm(1.96)
qnorm(0.99)
qnorm(0.9)
qnorm(0.90)
pnorm(8.92)
qnorm(8.92)
qnorm(3.85)
pnorm(3.85)
pnorm(8.92)
pnorm(0.421, mean = 0.5, sd = sqrt(0.25/765))
pnorm(-8.125)
pnorm(8.92)
